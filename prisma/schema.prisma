generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean   @default(false)

  sessions Session[]
  accounts Account[]

  player Player @relation(fields: [email], references: [email])

  @@map("users")
}

model Player {
  name  String
  email String @id

  user       User?
  eloUpdates EloUpdate[]
  teams      PlayerTeam[]

  @@map("players")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String  @db.VarChar(50)
  providerAccountId String  @map("provider_account_id") @db.VarChar(50)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token") @db.VarChar(70)
  userId       String   @map("user_id")
  expires      DateTime @db.Timestamp(0)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model EloUpdate {
  id       BigInt   @id
  playerId String   @map("player_id")
  gameId   BigInt   @map("game_id")
  oldElo   Int      @map("old_elo")
  newElo   Int      @map("new_elo")
  time     DateTime @default(now()) @db.Timestamp(0)

  player Player @relation(fields: [playerId], references: [email], onDelete: Cascade)
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("elo_updates")
}

model PlayerTeam {
  id       BigInt @id
  playerId String @map("player_id")
  teamId   BigInt @map("team_id")

  player Player @relation(fields: [playerId], references: [email], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("player_teams")
}

model Team {
  id     BigInt @id
  gameId BigInt @map("game_id")
  score  Int

  game    Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  players PlayerTeam[]

  @@map("teams")
}

model Game {
  id         BigInt      @id
  time       DateTime    @default(now()) @db.Timestamp(0)
  teams      Team[]
  eloUpdates EloUpdate[]

  @@map("games")
}
